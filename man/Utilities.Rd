% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plugin.R, R/rcpp_hello_world.R, R/zzz.R
\name{.microsimulationLdFlags}
\alias{.microsimulationLdFlags}
\alias{inlineCxxPlugin}
\alias{LdFlags}
\alias{microsimulation.init}
\alias{microsimulation.exit}
\alias{unsigned}
\alias{signed}
\alias{rnormPos}
\alias{set.user.Random.seed}
\alias{advance.substream}
\alias{next.user.Random.substream}
\alias{user.Random.seed}
\alias{enum}
\alias{enum<-}
\alias{RNGstate}
\alias{frontier}
\alias{lines_frontier}
\alias{discountedPoint}
\alias{ICER}
\alias{.onLoad}
\alias{.onUnload}
\title{Internal function}
\usage{
.microsimulationLdFlags()

inlineCxxPlugin(...)

LdFlags()

microsimulation.init(PACKAGE = "microsimulation")

microsimulation.exit(PACKAGE = "microsimulation")

unsigned(seed)

signed(seed)

rnormPos(n, mean = 0, sd = 1, lbound = 0)

set.user.Random.seed(seed, PACKAGE = "microsimulation")

advance.substream(seed, n, PACKAGE = "microsimulation")

next.user.Random.substream(PACKAGE = "microsimulation")

user.Random.seed(PACKAGE = "microsimulation")

enum(obj, labels, start = 0)

enum(obj) <- value

RNGstate()

frontier(x, y, concave = TRUE, convex = NULL)

lines_frontier(x, y, pch = 19, type = "b", ...)

discountedPoint(y, time, dr)

ICER(object1, object2, ...)

.onLoad(lib, pkg)

.onUnload(libpath)
}
\arguments{
\item{...}{other arguments}

\item{PACKAGE}{package for the seed}

\item{seed}{random number seed}

\item{n}{number of sub-streams to advance}

\item{mean}{numeric for the mean of the (untruncated) normal distribution (default=0)}

\item{sd}{numeric for the sd of the (untruncated) normal distribution (default=1)}

\item{lbound}{numeric for the lower bound (default=0)}

\item{obj}{integer or logical for factor levels}

\item{labels}{labels for the factor levels}

\item{start}{first value of the levels}

\item{value}{labels for the factor levels}

\item{x}{vector of x coordinates}

\item{y}{the undiscounted value}

\item{concave}{logical for whether to calculate a concave frontier (default=TRUE)}

\item{convex}{logical for whether to calculate a convex frontier (default=NULL)}

\item{pch}{type of pch for the plotted symbols (default=19)}

\item{type}{join type (default="b")}

\item{time}{the time of the event}

\item{dr}{discount rate, expressed as a percentage}

\item{object1}{first object}

\item{object2}{second object}

\item{lib}{library string}

\item{pkg}{package string}

\item{libpath}{library path string}
}
\value{
unsigned seed

signed seed

a list with oldseed (the old value of .Random.seed), and reset(), which resets .Random.seed

a list with components x and y for the frontier
}
\description{
Is this function needed? We could define the current stream in open code.

Again, is this needed?
}
